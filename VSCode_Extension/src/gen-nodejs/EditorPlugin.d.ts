//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

import thrift = require('thrift');
import Thrift = thrift.Thrift;
import Q = thrift.Q;
import Int64 = require('node-int64');

import ttypes = require('./CodeChat_Services_types');
import CodeChatClientLocation = ttypes.CodeChatClientLocation
import GetResultType = ttypes.GetResultType
import RenderClientReturn = ttypes.RenderClientReturn
import GetResultReturn = ttypes.GetResultReturn

declare class Client {
  private output: thrift.TTransport;
  private pClass: thrift.TProtocol;
  private _seqid: number;

  constructor(output: thrift.TTransport, pClass: { new(trans: thrift.TTransport): thrift.TProtocol });

  get_client(codeChat_client_location: CodeChatClientLocation): RenderClientReturn;

  get_client(codeChat_client_location: CodeChatClientLocation, callback?: (error: void, response: RenderClientReturn)=>void): void;

  start_render(text: string, path: string, id: number): string;

  start_render(text: string, path: string, id: number, callback?: (error: void, response: string)=>void): void;

  stop_client(id: number): string;

  stop_client(id: number, callback?: (error: void, response: string)=>void): void;
}

declare class Processor {
  private _handler: object;

  constructor(handler: object);
  process(input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_get_client(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_start_render(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
  process_stop_client(seqid: number, input: thrift.TProtocol, output: thrift.TProtocol): void;
}
