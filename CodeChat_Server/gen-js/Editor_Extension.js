//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

Editor_Extension_render_client_args = function(args) {
};
Editor_Extension_render_client_args.prototype = {};
Editor_Extension_render_client_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_render_client_args.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_render_client_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_Extension_render_client_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
Editor_Extension_render_client_result.prototype = {};
Editor_Extension_render_client_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_render_client_result.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_render_client_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_Extension_start_render_args = function(args) {
  this.text = null;
  this.path = null;
  this.id = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Editor_Extension_start_render_args.prototype = {};
Editor_Extension_start_render_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_start_render_args.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_start_render_args');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 3);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_Extension_start_render_result = function(args) {
};
Editor_Extension_start_render_result.prototype = {};
Editor_Extension_start_render_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_start_render_result.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_start_render_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_Extension_stop_render_client_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
Editor_Extension_stop_render_client_args.prototype = {};
Editor_Extension_stop_render_client_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_stop_render_client_args.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_stop_render_client_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_Extension_stop_render_client_result = function(args) {
};
Editor_Extension_stop_render_client_result.prototype = {};
Editor_Extension_stop_render_client_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Editor_Extension_stop_render_client_result.prototype.write = function(output) {
  output.writeStructBegin('Editor_Extension_stop_render_client_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Editor_ExtensionClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
Editor_ExtensionClient.prototype = {};

Editor_ExtensionClient.prototype.render_client = function(callback) {
  this.send_render_client(callback); 
  if (!callback) {
    return this.recv_render_client();
  }
};

Editor_ExtensionClient.prototype.send_render_client = function(callback) {
  var args = new Editor_Extension_render_client_args();
  try {
    this.output.writeMessageBegin('render_client', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_render_client();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

Editor_ExtensionClient.prototype.recv_render_client = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Editor_Extension_render_client_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'render_client failed: unknown result';
};

Editor_ExtensionClient.prototype.start_render = function(text, path, id, callback) {
  this.send_start_render(text, path, id, callback); 
  if (!callback) {
  this.recv_start_render();
  }
};

Editor_ExtensionClient.prototype.send_start_render = function(text, path, id, callback) {
  var params = {
    text: text,
    path: path,
    id: id
  };
  var args = new Editor_Extension_start_render_args(params);
  try {
    this.output.writeMessageBegin('start_render', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_start_render();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

Editor_ExtensionClient.prototype.recv_start_render = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Editor_Extension_start_render_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};

Editor_ExtensionClient.prototype.stop_render_client = function(id, callback) {
  this.send_stop_render_client(id, callback); 
  if (!callback) {
  this.recv_stop_render_client();
  }
};

Editor_ExtensionClient.prototype.send_stop_render_client = function(id, callback) {
  var params = {
    id: id
  };
  var args = new Editor_Extension_stop_render_client_args(params);
  try {
    this.output.writeMessageBegin('stop_render_client', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_stop_render_client();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

Editor_ExtensionClient.prototype.recv_stop_render_client = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new Editor_Extension_stop_render_client_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
